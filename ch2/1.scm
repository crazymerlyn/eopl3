(define base 256)
(define (zero) '())
(define (is-zero? n) (null? n))
(define (successor n)
  (if (is-zero? n)
      '(1)
      (let ((first (+ 1 (car n))))
       (if (= first base)
           (cons 0 (successor (cdr n)))
           (cons first (cdr n))))))
(define (predecessor n)
  (if (is-zero? n)
      (error "Can't find a predecessor of 0")
      (let ((first (- (car n) 1)))
       (if (= first -1)
           (cons (- base 1) (predecessor (cdr n)))
           (cons first (cdr n))))))
